"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const GetSitemapLinks = (url, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const hostname = new URL(url).hostname.replace(".", "\\.");
        const regex = new RegExp(`https?:\/\/${hostname}.+?(?=<\/loc>)`, "gmi");
        const { data } = yield axios_1.default.get(url);
        let indexes = [...new Set(data.match(regex))];
        if (indexes.length === 0 || !indexes[0].endsWith(".xml")) {
            return indexes;
        }
        const { filterIndexes } = options;
        if (filterIndexes) {
            indexes = indexes.filter((e) => e.includes(filterIndexes));
        }
        let links = [];
        for (const index of indexes) {
            try {
                const indexData = (yield axios_1.default.get(index)).data;
                const array = indexData.match(regex);
                if (array)
                    links.push(...array);
            }
            catch (err) { }
        }
        return [...new Set(links)];
    }
    catch (err) {
        return [];
    }
});
exports.default = GetSitemapLinks;
